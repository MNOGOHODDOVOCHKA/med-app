// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	medapp "github.com/mnogohoddovochka/med-app"
)

// MockAuthorisation is a mock of Authorisation interface.
type MockAuthorisation struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorisationMockRecorder
}

// MockAuthorisationMockRecorder is the mock recorder for MockAuthorisation.
type MockAuthorisationMockRecorder struct {
	mock *MockAuthorisation
}

// NewMockAuthorisation creates a new mock instance.
func NewMockAuthorisation(ctrl *gomock.Controller) *MockAuthorisation {
	mock := &MockAuthorisation{ctrl: ctrl}
	mock.recorder = &MockAuthorisationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorisation) EXPECT() *MockAuthorisationMockRecorder {
	return m.recorder
}

// CreateDoctor mocks base method.
func (m *MockAuthorisation) CreateDoctor(doctor medapp.Doctor) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDoctor", doctor)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDoctor indicates an expected call of CreateDoctor.
func (mr *MockAuthorisationMockRecorder) CreateDoctor(doctor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDoctor", reflect.TypeOf((*MockAuthorisation)(nil).CreateDoctor), doctor)
}

// GenerateToken mocks base method.
func (m *MockAuthorisation) GenerateToken(login, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", login, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthorisationMockRecorder) GenerateToken(login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthorisation)(nil).GenerateToken), login, password)
}

// ParseToken mocks base method.
func (m *MockAuthorisation) ParseToken(token string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthorisationMockRecorder) ParseToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthorisation)(nil).ParseToken), token)
}

// MockDoctorList is a mock of DoctorList interface.
type MockDoctorList struct {
	ctrl     *gomock.Controller
	recorder *MockDoctorListMockRecorder
}

// MockDoctorListMockRecorder is the mock recorder for MockDoctorList.
type MockDoctorListMockRecorder struct {
	mock *MockDoctorList
}

// NewMockDoctorList creates a new mock instance.
func NewMockDoctorList(ctrl *gomock.Controller) *MockDoctorList {
	mock := &MockDoctorList{ctrl: ctrl}
	mock.recorder = &MockDoctorListMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDoctorList) EXPECT() *MockDoctorListMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockDoctorList) GetAll() ([]medapp.Doctor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]medapp.Doctor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockDoctorListMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockDoctorList)(nil).GetAll))
}

// GetById mocks base method.
func (m *MockDoctorList) GetById(id int) (medapp.Doctor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(medapp.Doctor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockDoctorListMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockDoctorList)(nil).GetById), id)
}

// MockPatientList is a mock of PatientList interface.
type MockPatientList struct {
	ctrl     *gomock.Controller
	recorder *MockPatientListMockRecorder
}

// MockPatientListMockRecorder is the mock recorder for MockPatientList.
type MockPatientListMockRecorder struct {
	mock *MockPatientList
}

// NewMockPatientList creates a new mock instance.
func NewMockPatientList(ctrl *gomock.Controller) *MockPatientList {
	mock := &MockPatientList{ctrl: ctrl}
	mock.recorder = &MockPatientListMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPatientList) EXPECT() *MockPatientListMockRecorder {
	return m.recorder
}

// CreatePatient mocks base method.
func (m *MockPatientList) CreatePatient(input medapp.Patient) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePatient", input)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePatient indicates an expected call of CreatePatient.
func (mr *MockPatientListMockRecorder) CreatePatient(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePatient", reflect.TypeOf((*MockPatientList)(nil).CreatePatient), input)
}

// DeletePatient mocks base method.
func (m *MockPatientList) DeletePatient(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePatient", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePatient indicates an expected call of DeletePatient.
func (mr *MockPatientListMockRecorder) DeletePatient(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePatient", reflect.TypeOf((*MockPatientList)(nil).DeletePatient), id)
}

// GetAll mocks base method.
func (m *MockPatientList) GetAll() ([]medapp.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]medapp.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockPatientListMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPatientList)(nil).GetAll))
}

// GetById mocks base method.
func (m *MockPatientList) GetById(id int) (medapp.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(medapp.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockPatientListMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockPatientList)(nil).GetById), id)
}

// UpdatePatient mocks base method.
func (m *MockPatientList) UpdatePatient(id int, input medapp.UpdPatient) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePatient", id, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePatient indicates an expected call of UpdatePatient.
func (mr *MockPatientListMockRecorder) UpdatePatient(id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatient", reflect.TypeOf((*MockPatientList)(nil).UpdatePatient), id, input)
}

// MockVisitList is a mock of VisitList interface.
type MockVisitList struct {
	ctrl     *gomock.Controller
	recorder *MockVisitListMockRecorder
}

// MockVisitListMockRecorder is the mock recorder for MockVisitList.
type MockVisitListMockRecorder struct {
	mock *MockVisitList
}

// NewMockVisitList creates a new mock instance.
func NewMockVisitList(ctrl *gomock.Controller) *MockVisitList {
	mock := &MockVisitList{ctrl: ctrl}
	mock.recorder = &MockVisitListMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVisitList) EXPECT() *MockVisitListMockRecorder {
	return m.recorder
}

// CreateVisit mocks base method.
func (m *MockVisitList) CreateVisit(input medapp.Visit) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVisit", input)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVisit indicates an expected call of CreateVisit.
func (mr *MockVisitListMockRecorder) CreateVisit(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVisit", reflect.TypeOf((*MockVisitList)(nil).CreateVisit), input)
}

// DeleteVisit mocks base method.
func (m *MockVisitList) DeleteVisit(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVisit", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVisit indicates an expected call of DeleteVisit.
func (mr *MockVisitListMockRecorder) DeleteVisit(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVisit", reflect.TypeOf((*MockVisitList)(nil).DeleteVisit), id)
}

// GetAll mocks base method.
func (m *MockVisitList) GetAll() ([]medapp.VisitOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]medapp.VisitOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockVisitListMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockVisitList)(nil).GetAll))
}

// GetById mocks base method.
func (m *MockVisitList) GetById(id int) (medapp.VisitOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(medapp.VisitOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockVisitListMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockVisitList)(nil).GetById), id)
}

// UpdateVisit mocks base method.
func (m *MockVisitList) UpdateVisit(id int, input medapp.UpdVisit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVisit", id, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVisit indicates an expected call of UpdateVisit.
func (mr *MockVisitListMockRecorder) UpdateVisit(id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVisit", reflect.TypeOf((*MockVisitList)(nil).UpdateVisit), id, input)
}
